{"version":3,"sources":["components/layout/SignedIn.js","store/actions/authActions.js","components/layout/SignedOut.js","components/layout/Navbar.js","components/dashboard/Notifications.js","components/posts/PostSummary.js","components/posts/PostList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","components/auth/Signin.js","components/auth/Signup.js","store/actions/postActions.js","components/posts/CreatePost.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/rootReducer.js","config/firebase.js","index.js"],"names":["connect","dispatch","signOut","getState","a","getFirebase","firebase","auth","type","error","props","className","to","onClick","profile","initials","SignedOut","state","links","uid","Notifications","notifications","map","item","key","id","user","content","moment","time","toDate","fromNow","PostSummary","post","title","authorFirstName","authorLastName","createdAt","calendar","PostList","posts","Dashboard","this","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","ownProps","match","params","data","Signin","email","password","handleChange","e","setState","target","value","handleSubmit","preventDefault","signIn","authError","onSubmit","htmlFor","onChange","creds","credentials","signInWithEmailAndPassword","Signup","firstName","lastName","signUp","newUser","getFirestore","createUserWithEmailAndPassword","doc","set","CreatePost","createPost","history","push","authorId","add","Date","App","exact","path","component","PostDetails","SignIn","SignUp","Boolean","window","location","hostname","initState","authReducer","action","console","log","message","postReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","then","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a1c363f.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { signOut } from '../../store/actions/authActions'\n\nconst SignedIn = (props) => {\n  return (\n    <ul className=\"right\">\n      <li><NavLink to='/create'>New Post</NavLink></li>\n      <li><Link onClick={props.signOut} to=\"/\">Log Out</Link></li>\n      <li><NavLink to='/' className='btn btn-floating pink lighten-1'>{props.profile.initials}</NavLink></li>\n    </ul>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signOut: () => dispatch(signOut())\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SignedIn);","export const signIn = (credentials) => {\n  return async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase();\n    try {\n      await firebase.auth().signInWithEmailAndPassword(\n        credentials.email,\n        credentials.password\n      )\n      dispatch({ type: 'LOGIN_SUCCESS' })\n    } catch (error) {\n      dispatch({ type: 'LOGIN_ERROR', error })\n    }\n  }\n}\n\nexport const signOut = () => {\n  return async (dispatch, getState, { getFirebase }) => {\n    try {\n      const firebase = getFirebase();\n      await firebase.auth().signOut()\n      dispatch({ type: 'SIGNOUT_SUCCESS' })\n    } catch (error) {\n      dispatch({ type: 'SIGNOUT_ERROR', error })\n    }\n  }\n}\n\nexport const signUp = (newUser) => {\n  return async (dispatch, getState, { getFirebase, getFirestore }) => {\n    try {\n      const firebase = getFirebase();\n      const firestore = getFirestore()\n      const user = await firebase.auth().createUserWithEmailAndPassword(\n        newUser.email,\n        newUser.password\n      )\n      await firestore.collection('users').doc(user.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0]\n      })\n      dispatch({ type: 'SIGNUP_SUCCESS' })\n    } catch (error) {\n      dispatch({ type: 'SIGNUP_ERROR', error })\n    }\n  }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst SignedOut = () => {\n  return (\n    <ul className=\"right\">\n      <li><NavLink to='/signup'>Sign Up</NavLink></li>\n      <li><NavLink to='/signin'>Log In</NavLink></li>\n    </ul>\n  )\n}\n\nexport default SignedOut;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignedIn from './SignedIn';\nimport SignedOut from './SignedOut';\nimport { connect } from 'react-redux';\n\nconst Navbar = (props) => {\n  const { auth, profile } = props\n  const links = auth.uid ? <SignedIn profile={profile} /> : <SignedOut />\n  return (\n    <nav className=\"nav-wrapper grey darken-3\">\n      <div className=\"container\">\n        <Link to='/' className='brand-logo left'>Sports Post</Link>\n        {links}\n      </div>\n    </nav>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile\n  }\n}\n\nexport default connect(mapStateToProps)(Navbar);\n","import React from 'react';\nimport moment from 'moment';\n\nconst Notifications = (props) => {\n  const { notifications } = props\n  return (\n    <div className=\"section\">\n      <div className=\"card z-depth-0\">\n        <div className=\"card-content\">\n          <span className=\"card-title\">Notifications</span>\n          <ul className=\"notifications\">\n            {notifications && notifications.map(item => {\n              return (\n                <li key={item.id}>\n                  <span className=\"pink-text\">{item.user}</span>\n                  <span> {item.content} </span>\n                  <div className=\"grey-text note-date\">\n                    {moment(item.time.toDate()).fromNow()}\n                  </div>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Notifications;","import React from 'react'\nimport moment from 'moment'\n\nconst PostSummary = ({ post }) => {\n  return (\n    <div className=\"card z-depth-0 post-summary\">\n      <div className=\"card-content grey-text-darken-3\">\n        <span className=\"card-title\">{post.title}</span>\n        <p>Posted by {post.authorFirstName} {post.authorLastName}</p>\n        <p className=\"grey-text\">{moment(post.createdAt.toDate()).calendar()}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default PostSummary;\n","import React from 'react';\nimport PostSummary from './PostSummary';\nimport { Link } from 'react-router-dom';\n\nconst PostList = ({ posts }) => {\n  return (\n    <div className=\"post-list section\">\n      {posts && posts.map(post => {\n        return (\n          <Link to={'/post/' + post.id} key={post.id}>\n            <PostSummary post={post} />\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default PostList;\n","import React, { Component } from 'react';\n\nimport Notifications from './Notifications';\nimport PostList from '../posts/PostList';\n\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Dashboard extends Component {\n  render() {\n    const { posts, auth, notifications } = this.props;\n    if (!auth.uid) return <Redirect to='/signin' />\n    return (\n      <div className='dashboard container'>\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <PostList posts={posts} />\n          </div>\n          <div className=\"col s12 m5 offset-m1\">\n            <Notifications notifications={notifications} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.firestore.ordered.posts,\n    auth: state.firebase.auth,\n    notifications: state.firestore.ordered.notifications\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'posts', orderBy: ['createdAt', 'desc'] },\n    { collection: 'notifications', limit: 3, orderBy: ['time', 'desc'] }\n  ])\n)(Dashboard);","import React from 'react'\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport moment from 'moment'\n\nconst PostDetails = (props) => {\n  const { post, auth } = props;\n  if (!auth.uid) return <Redirect to='/signin' />\n  if (post) {\n    return (\n      <div className=\"container section project-details\">\n        <div className=\"card z-depth-0\">\n          <div className=\"card-content\">\n            <span className=\"card-title\">{post.title}</span>\n            <p>{post.content}</p>\n          </div>\n          <div className=\"card-action grey lighten-4 grey-text\">\n            <div>Posted by {post.authorFirstName} {post.authorLastName}</div>\n            <div>{moment(post.createdAt.toDate()).calendar()}</div>\n            <div><Link to='/'>Go To Homepage</Link></div>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"container center\">\n        <p>Loading Post...</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.match.params.id\n  const posts = state.firestore.data.posts\n  const post = posts ? posts[id] : null\n  return {\n    post: post,\n    auth: state.firebase.auth\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps),\n  firestoreConnect([\n    { collection: 'post' }\n  ])\n)(PostDetails)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { signIn } from '../../store/actions/authActions'\nimport { Redirect } from 'react-router-dom'\n\n\nclass Signin extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.signIn(this.state)\n  }\n  render() {\n    const { authError, auth } = this.props;\n    if (auth.uid) return <Redirect to='/' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign In</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authError ? <p>{authError}</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { signUp } from '../../store/actions/authActions'\n\nclass Signup extends Component {\n  state = {\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.signUp(this.state)\n  }\n  render() {\n    const { auth, authError } = this.props\n    if (auth.uid) return <Redirect to='' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id='email' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id='password' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"firstName\">First Name</label>\n            <input type=\"text\" id='firstName' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"lastnName\">Last Name</label>\n            <input type=\"text\" id='lastName' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\n            <div className=\"red-text center\">\n              {authError ? <p>{authError}</p> : null}\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth,\n    authError: state.auth.authError\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUp: (newUser) => dispatch(signUp(newUser))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup)\n\n","// create post action\nexport const createPost = (post) => {\n  return async (dispatch, getState, { getFirebase, getFirestore }) => {\n    try {\n      const firestore = getFirestore();\n      const profile = getState().firebase.profile;\n      const authorId = getState().firebase.auth.uid;\n      await firestore.collection('posts').add({\n        ...post,\n        authorFirstName: profile.firstName,\n        authorLastName: profile.lastName,\n        authorId: authorId,\n        createdAt: new Date()\n      })\n      dispatch({ type: 'CREATE_POST', post })\n    } catch (error) {\n      dispatch({ type: 'CREATE_POST_ERROR', error })\n    }\n  }\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../../store/actions/postActions';\nimport { Redirect } from 'react-router-dom';\n\nclass CreatePost extends Component {\n  state = {\n    title: '',\n    content: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.createPost(this.state)\n    this.props.history.push('/')\n  }\n  render() {\n    const { auth } = this.props;\n    if (!auth.uid) return <Redirect to='/signin' />\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit} className=\"white\">\n          <h5 className=\"grey-text text-darken-3\">Create Post</h5>\n          <div className=\"input-field\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" id='title' onChange={this.handleChange} />\n          </div>\n          <div className=\"input-field\">\n            <label htmlFor=\"content\">Post Content</label>\n            <textarea id=\"content\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\n          </div>\n          <div className=\"input-field\">\n            <button className=\"btn pink lighten-1 z-depth-0\">Post</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createPost: (post) => dispatch(createPost(post))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\n\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport PostDetails from './components/posts/PostDetails';\nimport SignIn from './components/auth/Signin';\nimport SignUp from './components/auth/Signup';\nimport CreatePost from './components/posts/CreatePost';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className='App'>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/post/:id' component={PostDetails} />\n            <Route path='/signin' component={SignIn} />\n            <Route path='/signup' component={SignUp} />\n            <Route path='/create' component={CreatePost} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  authError: null\n}\n\nconst authReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'LOGIN_ERROR':\n      console.log('login error');\n      return {\n        ...state,\n        authError: 'Login failed'\n      }\n    case 'LOGIN_SUCCESS':\n      console.log('login success');\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNOUT_SUCCESS':\n      console.log('signout success');\n      return state\n    case 'SIGNUP_SUCCESS':\n      console.log('signup success');\n      return {\n        ...state,\n        authError: null\n      }\n    case 'SIGNUP_ERROR':\n      console.log('signup error')\n      return {\n        ...state,\n        authError: action.error.message\n      }\n    default:\n      return state\n  }\n}\n\nexport default authReducer","const initState = {}\n\nconst postReducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CREATE_POST':\n      console.log('created post', action.post);\n      return state;\n    case 'CREATE_POST_ERROR':\n      console.log('create project error', action.error);\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport default postReducer\n\n","import { combineReducers } from 'redux'\nimport authReducer from './authReducer'\nimport postReducer from './postReducer'\nimport { firestoreReducer } from 'redux-firestore'\nimport { firebaseReducer } from 'react-redux-firebase'\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  post: postReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer\n})\n\nexport default rootReducer\n\n","import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAlHxiZbBPLRRCZKJY5XNEM2XqNRkF79I0\",\n  authDomain: \"react-bloggerapp.firebaseapp.com\",\n  databaseURL: \"https://react-bloggerapp.firebaseio.com\",\n  projectId: \"react-bloggerapp\",\n  storageBucket: \"\",\n  messagingSenderId: \"799083488337\",\n  appId: \"1:799083488337:web:40ce310fa41675528cc470\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n// firebase.firestore().settings({ timestampsInSnapshots: true });\n\nexport default firebase;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/firebase';\n\nconst store = createStore(rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    reduxFirestore(fbConfig),\n    reactReduxFirebase(fbConfig, { useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\n  )\n);\n\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n  serviceWorker.unregister();\n})\n\n\n\n"],"sourceRoot":""}